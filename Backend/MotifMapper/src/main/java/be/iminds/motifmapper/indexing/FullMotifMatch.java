package be.iminds.motifmapper.indexing;


public class FullMotifMatch {
	
	protected String motif;
	protected int bls;
	protected String geneFamily;
	protected String gene;
	protected char direction;
	
	protected static final char tab = '\t';
	

	public FullMotifMatch(){
		
	}
	
	public FullMotifMatch(FullMotifMatch match) {
		this.motif = match.motif;
		this.bls = match.bls;
		this.geneFamily = match.geneFamily;
		this.gene = match.gene;
		this.direction = match.direction;

		
	}

	/**
	 * @return the motif
	 */
	public String getMotif() {
		return motif;
	}

	/**
	 * @param motif the motif to set
	 */
	public void setMotif(String motif) {
		this.motif = motif;
	}

	/**
	 * @return the bls
	 */
	public int  getBls() {
		return bls;
	}


	/**
	 * @param bls the bls to set
	 */
	public void setBls(int bls) {
		this.bls = bls;
	}

	/**
	 * @return the geneFamily
	 */
	public String getGeneFamily() {
		return geneFamily;
	}

	/**
	 * @param geneFamily the geneFamily to set
	 */
	public void setGeneFamily(String geneFamily) {
		this.geneFamily = geneFamily;
	}

	/**
	 * @return the gene
	 */
	public String getGene() {
		return gene;
	}

	/**
	 * @param gene the gene to set
	 */
	public void setGene(String gene) {
		this.gene = gene;
	}

	/**
	 * @return the direction
	 */
	public char getDirection() {
		return direction;
	}

	/**
	 * @param direction the direction to set
	 */
	public void setDirection(char direction) {
		this.direction = direction;
	}

	/* 
	 * generated by eclipse code templates
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + bls;
		result = prime * result + direction;
		result = prime * result + ((gene == null) ? 0 : gene.hashCode());
		result = prime * result
				+ ((geneFamily == null) ? 0 : geneFamily.hashCode());
		result = prime * result + ((motif == null) ? 0 : motif.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj instanceof FullMotifMatch){
			FullMotifMatch castedObj = (FullMotifMatch) obj;
				
			return 
				castedObj.motif.equals(this.motif) 
				&& castedObj.geneFamily.equals(this.geneFamily)  
				&& castedObj.bls == this.bls
				&& castedObj.gene.equals(this.gene)
				&& castedObj.direction == this.direction; 
			
		}
		return false;
	}

	@Override
	public String toString() {
		
		StringBuilder builder = new StringBuilder();
		builder.append(motif); 		builder.append(tab);
		builder.append(bls);   		builder.append(tab);
		builder.append(geneFamily); builder.append(tab);
		builder.append(gene); 		builder.append(tab);
		builder.append(direction);  builder.append(tab);
		

		return builder.toString();
	}


	

	

}
